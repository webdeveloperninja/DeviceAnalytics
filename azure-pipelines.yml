steps:
  - task: Npm@1
    displayName: "npm install"
    inputs:
      command: install
      workingDir: "$(Build.SourcesDirectory)/Components"
  - task: Npm@1
    displayName: "Build Angular"
    inputs:
      command: custom
      customCommand: run build
      workingDir: "$(Build.SourcesDirectory)/Components"
  - task: CopyFiles@2
    displayName: "copy Components to artifact staging directory"
    inputs:
      sourceFolder: "$(Build.SourcesDirectory)/Components/dist/components"
      contents: "**"
      targetFolder: "$(Build.ArtifactStagingDirectory)/Components"
  - task: CopyFiles@2
    displayName: "copy infrastructure to artifact staging directory"
    inputs:
      sourceFolder: "$(Build.SourcesDirectory)/Infrastructure"
      contents: "**"
      targetFolder: "$(Build.ArtifactStagingDirectory)/Infrastructure"
  - script: dotnet test Functions/DeviceAnalyticsUnitTests --logger trx
    displayName: Run Functions Tests
  - task: PublishTestResults@2
    displayName: Publish Test Results
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: "**/*.trx"
  - task: CmdLine@2
      displayName: "dotnet restore"
      inputs:
        script: "dotnet restore"
        workingDirectory: "$(Build.SourcesDirectory)/Functions"
  - task: CmdLine@2
    displayName: "dotnet build"
    inputs:
      script: "dotnet build --configuration Release"
      workingDirectory: "$(Build.SourcesDirectory)/Functions"
  - task: PublishPipelineArtifact@1
    displayName: "publish artifact"
    inputs:
      artifactName: drop
      targetPath: $(Build.ArtifactStagingDirectory)